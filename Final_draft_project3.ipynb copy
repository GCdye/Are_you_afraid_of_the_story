{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import time\n",
    "import requests\n",
    "import json\n",
    "import matplotlib.pyplot as plt\n",
    "pd.set_option('display.max_colwidth', -1)\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import re\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calling function defined in class by brian\n",
    "def query_pushshift(subreddit, kind='submission', skip=30, times=6, \n",
    "                    subfield = ['title', 'selftext', 'subreddit', 'created_utc', 'author', 'num_comments', 'score', 'is_self'],\n",
    "                    comfields = ['body', 'score', 'created_utc']):\n",
    "\n",
    "    stem = \"https://api.pushshift.io/reddit/search/{}/?subreddit={}&size=500\".format(kind, subreddit)\n",
    "    mylist = []\n",
    "  #for loop to scrape each page of the reddit api defined by number of times  \n",
    "    for x in range(1, times):\n",
    "        \n",
    "        URL = \"{}&after={}d\".format(stem, skip * x)\n",
    "        print(URL)\n",
    "        response = requests.get(URL)\n",
    "        assert response.status_code == 200\n",
    "        mine = response.json()['data']\n",
    "        df = pd.DataFrame.from_dict(mine)\n",
    "        mylist.append(df)\n",
    "        time.sleep(2)\n",
    "      #Adding sleep to prevent overworking reddit servers  \n",
    "    full = pd.concat(mylist, sort=False)\n",
    " #concating the data scrapes \n",
    "    if kind == \"submission\":\n",
    "        \n",
    "        full = full[subfield]\n",
    "        \n",
    "        full = full.drop_duplicates()\n",
    "        \n",
    "        full = full.loc[full['is_self'] == True]\n",
    "        \n",
    "    def get_date(created):\n",
    "        return dt.date.fromtimestamp(created)\n",
    "    #adding timestamp\n",
    "    _timestamp = full[\"created_utc\"].apply(get_date)\n",
    "    \n",
    "    full['timestamp'] = _timestamp\n",
    "\n",
    "    print(full.shape)\n",
    "    \n",
    "    return full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://api.pushshift.io/reddit/search/submission/?subreddit=nosleep&size=500&after=30d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=nosleep&size=500&after=60d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=nosleep&size=500&after=90d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=nosleep&size=500&after=120d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=nosleep&size=500&after=150d\n",
      "(2497, 9)\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=letsnotmeet&size=500&after=30d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=letsnotmeet&size=500&after=60d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=letsnotmeet&size=500&after=90d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=letsnotmeet&size=500&after=120d\n",
      "https://api.pushshift.io/reddit/search/submission/?subreddit=letsnotmeet&size=500&after=150d\n",
      "(2480, 9)\n"
     ]
    }
   ],
   "source": [
    "#calling the function on each target subreddit and saving to dataframes\n",
    "nosleep = query_pushshift('nosleep')\n",
    "\n",
    "lets_not_meet = query_pushshift('letsnotmeet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function that iterates through each selftext post for cleaning purposes\n",
    "def data_cleaner(df, classifier):\n",
    "    #resetting index \n",
    "    df.reset_index(inplace=True)\n",
    "    #dropping all posts that are [Removed]\n",
    "    df = df[df['selftext'] != '[removed]']\n",
    "    #binarizing the two subreddits as either 1 or 0 \n",
    "    df['class'] = int(classifier)\n",
    "    #Dropping any rows without text\n",
    "    df.dropna(axis=0, inplace=True)\n",
    "    #Iterating through the selftext column to clean up formatting symbols and escape characters \n",
    "    for i in df['selftext']:\n",
    "        i = str(i).replace('&amp;#x200B', '')\n",
    "        i = str(i).replace('#x200B', '')\n",
    "        i = str(i).replace('&amp;', '')\n",
    "        #returning the df to be saved\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "ns_to_concat = data_cleaner(nosleep, 0)\n",
    "#first run of the function that cleans and saves the /r/Nosleep data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "lnm_to_concat = data_cleaner(lets_not_meet, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Concatenating posts\n",
    "posts = pd.concat([ns_to_concat, lnm_to_concat], axis=0,)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index           0\n",
       "title           0\n",
       "selftext        0\n",
       "subreddit       0\n",
       "created_utc     0\n",
       "author          0\n",
       "num_comments    0\n",
       "score           0\n",
       "is_self         0\n",
       "timestamp       0\n",
       "class           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "posts.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Setting X and y \n",
    "X = posts['selftext']\n",
    "y = posts['class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data to train and test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,\n",
    "                                                   stratify=y,\n",
    "                                                   random_state =42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Init the count vectorizer\n",
    "cv = CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#transforming the selftext column into a bag of words model \n",
    "X_train_cv = cv.fit_transform(X_train)\n",
    "X_test_cv = cv.transform(X_test)\n",
    "#initiating LogReg \n",
    "lr = LogisticRegressionCV(cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegressionCV(Cs=10, class_weight=None, cv=5, dual=False,\n",
       "           fit_intercept=True, intercept_scaling=1.0, max_iter=100,\n",
       "           multi_class='warn', n_jobs=None, penalty='l2',\n",
       "           random_state=None, refit=True, scoring=None, solver='lbfgs',\n",
       "           tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the data\n",
    "lr.fit(X_train_cv, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The training score for the LogReg model is: 0.9754716981132076\n",
      "The testing score bor the logReg model is: 0.9434389140271493\n"
     ]
    }
   ],
   "source": [
    "#Checking scores for each model\n",
    "print(f'The training score for the LogReg model is: {lr.score(X_train_cv, y_train)}')\n",
    "\n",
    "print(f\"The testing score bor the logReg model is: {lr.score(X_test_cv, y_test)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('cv', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip_a...    random_state=None, refit=True, scoring=None, solver='lbfgs',\n",
       "           tol=0.0001, verbose=0))]),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid={'cv__max_features': [None, 2500, 5000], 'cv__stop_words': [None, 'english'], 'lr__Cs': [5, 10, 15]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#setting up a pipeline to gridsearch and make the strongest possible model\n",
    "pipe = Pipeline([\n",
    "    ('cv', CountVectorizer()),\n",
    "    ('lr', LogisticRegressionCV())\n",
    "])\n",
    "#The param dict to be searched\n",
    "param_grid = {\n",
    "    'cv__max_features':[None, 2500, 5000],\n",
    "    'cv__stop_words': [None, 'english'],\n",
    "    'lr__Cs': [5, 10, 15]\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "#Setting gridsearch and finding the best logreg model\n",
    "gs = GridSearchCV(pipe, param_grid=param_grid,)\n",
    "#Fitting the model\n",
    "gs.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cv__max_features': None, 'cv__stop_words': None, 'lr__Cs': 15}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting the best params \n",
    "gs.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#doing the same with a random forest classifier to \n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "cv = CountVectorizer(max_features=2500, stop_words = 'english')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('cv', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip_a...obs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False))]),\n",
       "       fit_params=None, iid='warn', n_jobs=-2,\n",
       "       param_grid={'cv__max_features': [None, 2500, 5000], 'cv__stop_words': ['english'], 'tree__max_depth': [5, 10, 25]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#setting up a pipeline and param grid for rand forest\n",
    "pipe2 = Pipeline([\n",
    "    ('cv', CountVectorizer()),\n",
    "    ('tree', RandomForestClassifier())\n",
    "])\n",
    "\n",
    "param_grid2 = {\n",
    "    'cv__max_features':[None, 2500, 5000],\n",
    "    'cv__stop_words': ['english'],\n",
    "    'tree__max_depth': [5, 10, 25],\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "gs = GridSearchCV(pipe2, param_grid=param_grid2,n_jobs=-2)\n",
    "\n",
    "gs.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('cv', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=None, stop_words=None,\n",
       "        strip_a...obs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False))]),\n",
       "       fit_params=None, iid='warn', n_jobs=-2,\n",
       "       param_grid={'cv__max_features': [None, 2500, 5000], 'cv__stop_words': ['english'], 'tree__max_depth': [5, 10, 25]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe2 = Pipeline([\n",
    "    ('cv', CountVectorizer()),\n",
    "    ('tree', RandomForestClassifier())\n",
    "])\n",
    "\n",
    "param_grid2 = {\n",
    "    'cv__max_features':[None, 2500, 5000],\n",
    "    'cv__stop_words': ['english'],\n",
    "    'tree__max_depth': [5, 10, 25],\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "gs = GridSearchCV(pipe2, param_grid=param_grid2,n_jobs=-2)\n",
    "\n",
    "gs.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe3 = Pipeline([\n",
    "    ('cv', CountVectorizer()),\n",
    "    ('nb', BernoulliNB())\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_dict3 = {\n",
    "    'cv__max_features': [None, 2500, 5000],\n",
    "    \n",
    "    'nb__alpha': [0.5, 1.0, 1.5]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "gs = GridSearchCV(pipe3, param_grid=param_dict3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('cv', CountVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), preprocessor=N... vocabulary=None)), ('nb', BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True))]),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid={'cv__max_features': [None, 2500, 5000], 'nb__alpha': [0.5, 1.0, 1.5]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7781132075471698"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function adapted from https://medium.com/@cristhianboujon/how-to-list-the-most-common-words-from-text-corpus-using-scikit-learn-dad4d0cab41d\n",
    "#Written by @cristhianboujon\n",
    "def get_top_n_words(corpus, n=None):\n",
    "#     List the top n words in a vocabulary according to occurrence in a text corpus.\n",
    "    vec = CountVectorizer(stop_words='english').fit(corpus)\n",
    "    bag_of_words = vec.transform(corpus)\n",
    "    sum_words = bag_of_words.sum(axis=0) \n",
    "    words_freq = [(word, sum_words[0, idx]) for word, idx in     vec.vocabulary_.items()]\n",
    "    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n",
    "    return words_freq[:n]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting top words from each subreddit to show top word counts comparatively \n",
    "top_spooky_words = pd.DataFrame(get_top_n_words(ns_to_concat['selftext'].dropna(axis=0), 10))\n",
    "\n",
    "\n",
    "\n",
    "top_real_spooky_words = pd.DataFrame(get_top_n_words(lnm_to_concat['selftext'].dropna(axis=0), 10))\n",
    "#setting plot settings\n",
    "plt.figure(figsize=(20,20))\n",
    "plt.bar(x=top_spooky_words[0], height=top_spooky_words[1], color = 'grey')\n",
    "plt.title('/r/NoSleep', {'fontsize': 50, 'color':'blue'})\n",
    "plt.xticks(rotation=45, size=30)\n",
    "plt.yticks(size=25);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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CGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0I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AAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIAAAAAtCKIAQAAANCKIAYAAABAK4IYAAAAAK0IYgAAAAC0IogBAAAA0IogBgAAAEArghgAAAAArQhiAAAAALQiiAEAAADQiiAGAAAAQCuCGAAAAACtCGIA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\n",
      "text/plain": [
       "<Figure size 1440x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# same setting for the next subreddit\n",
    "plt.figure(figsize=(20,20))\n",
    "plt.bar(x=top_real_spooky_words[0], height=top_spooky_words[1], color= 'purple')\n",
    "plt.title('/r/LetsNotMeet', {'fontsize': 50, 'color': 'blue'})\n",
    "plt.xticks(rotation=45, size=35)\n",
    "plt.yticks(size=25);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_preds = lr.predict(X_train_cv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1462.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,\n",
       "        1188.]),\n",
       " array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(lr_preds, height=2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
